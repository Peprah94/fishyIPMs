rad1 = Radius1,
rad2 = Radius2,
rad3 = Radius3,
rad4 = Radius4,
rad5 = Radius5,
rad6 = Radius6,
rad7 = Radius7,
rad8 = Radius8,
rad9 = Radius9,
rad10 = Radius10,
rad11 = Radius11,
rad12 = Radius12,
rad13 = Radius13,
rad14 = Radius14,
rad15 = Radius15,
rad16 = Radius16,
rad17 = Radius17,
rad18 = Radius18,
rad19 = Radius19,
rad20 = Radius20)
##Back calculating data using fraser lee per lake
indData <- indData %>%
group_by(FK_InnsjoNr) %>%
do(backCalc(., Lengde, BCM = "FRALE",
inFormat = "wide", outFormat = "long", digits = 0)) %>%
ungroup()
# Print the resulting dataframe
print(indData)
print(indData)
colnames(indData)
###
#Rename variables
indData <- indData %>%
rename(LengdeValder = bclen,
alder_aar = ann)
#including year of length increment (specific year affecting specific growth)
indData$vekstaar <- indData$Aar-((indData$agecap - indData$alder_aar+1))
colnames(indData)
#select variables of interest and change column names
indData <- indData[, c(1,4,6:11, 21, 38:42)]
colnames(indData)
colnames(indData)[1:13] <- c("fishID",
"InnsjoNr",
"date",
"year",
"month",
"day",
"runNr",
"speciesID",
"sex",
"extraName",
"extraWidth",
"yearGrowthOccured",
"lengthAtYear",
"growthAtYear")
colnames(indData) <- c("fishID",
"InnsjoNr",
"date",
"year",
"month",
"day",
"runNr",
"speciesID",
"sex",
"extraName",
"extraWidth",
"yearGrowthOccured",
"lengthAtYear",
"growthAtYear")
# import data with catchment variables
catchmentVars <- read_csv("dataset/timeseries_clc_population.csv")%>%
dplyr::mutate(innsjo_nr = as.character(innsjo_nr))%>%
dplyr::select(-c("vassdragNr"))%>%
distinct(innsjo_nr, year, .keep_all = TRUE)
colnames(catchmentVars)[1] <- c("InnsjoNr") # ensure that the lakenr are the same for all datasets
# import lake IDs
lakeInfo <- read_excel("dataset/Oversikt-lokaliteter-lagt inn i basen.xls")%>%
dplyr::select("Loknr", "InnsjoNr", "Loknavn")
# Add lake Nr and name to the individual fish dataset
# Catchment dataset has been formatted to the regions and years we need.
indData1 <- indData %>%
filter(sex <= 2)%>%
filter(InnsjoNr %in% catchmentVars$InnsjoNr)%>%
filter(year %in% catchmentVars$year)%>%
inner_join(catchmentVars, by = c("InnsjoNr", "year"), keep = FALSE)
indData1
# data is collected in 2008
# create the age at harvest data
indDataWithCatchments$presence <- 1
# Add lake Nr and name to the individual fish dataset
# Catchment dataset has been formatted to the regions and years we need.
indDataWithCatchments <- indData %>%
filter(sex <= 2)%>%
filter(InnsjoNr %in% catchmentVars$InnsjoNr)%>%
filter(year %in% catchmentVars$year)%>%
inner_join(catchmentVars, by = c("InnsjoNr", "year"), keep = FALSE)
indDataWithCatchments
# data is collected in 2008
# create the age at harvest data
indDataWithCatchments$presence <- 1
ageAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dcast(.,
year + sex + InnsjoNr + speciesID ~ ageAtYear,
value.var = "presence",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr", "speciesID"),
keep = FALSE,
multiple = "first")
colnames(indDataWithCatchments)
colnames(indData) <- c("fishID",
"InnsjoNr",
"date",
"year",
"month",
"day",
"runNr",
"speciesID",
"sex",
"extraName",
"extraWidth",
"ageAtYear",
"lengthAtYear",
"growthAtYear")
# import data with catchment variables
catchmentVars <- read_csv("dataset/timeseries_clc_population.csv")%>%
dplyr::mutate(innsjo_nr = as.character(innsjo_nr))%>%
dplyr::select(-c("vassdragNr"))%>%
distinct(innsjo_nr, year, .keep_all = TRUE)
colnames(catchmentVars)[1] <- c("InnsjoNr") # ensure that the lakenr are the same for all datasets
# import lake IDs
lakeInfo <- read_excel("dataset/Oversikt-lokaliteter-lagt inn i basen.xls")%>%
dplyr::select("Loknr", "InnsjoNr", "Loknavn")
# Add lake Nr and name to the individual fish dataset
# Catchment dataset has been formatted to the regions and years we need.
indDataWithCatchments <- indData %>%
filter(sex <= 2)%>%
filter(InnsjoNr %in% catchmentVars$InnsjoNr)%>%
filter(year %in% catchmentVars$year)%>%
inner_join(catchmentVars, by = c("InnsjoNr", "year"), keep = FALSE)
# data is collected in 2008
# create the age at harvest data
indDataWithCatchments$presence <- 1
ageAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dcast(.,
year + sex + InnsjoNr + speciesID ~ ageAtYear,
value.var = "presence",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr", "speciesID"),
keep = FALSE,
multiple = "first")
ageAtHarvestData
# Import Individual data
indData <- read.delim("dataset/innlandsfisk.txt",
sep = ";")
# select the species ID of interest from the data
focal_speciesid <- 5
indData <- indData[indData$FK_ArtID==focal_speciesid,]
#remove NAs for Length and Radius
indData <- indData[complete.cases(indData$Radius), ]
indData <- indData[complete.cases(indData$Lengde), ]
#Check fish data for different lakes
table(indData$FK_InnsjoNr)
# Some lakes have very few individuals across time(less than 10),
#remove these lakes as they dont seem representative for the species
# Remove rows with less than min_rows_per_category per category
indData <- indData %>%
group_by(FK_InnsjoNr) %>%
filter(n() >= 9) %>%
ungroup()
plot(indData$Lengde ~ indData$Radius)
#Seem to be two types of measurements, just remove the "outliers" for now
indData <- indData[indData$Radius<400,]
#Cheking for strange length Radius correlations among lakes and years
data_check <- indData %>%
group_by(FK_InnsjoNr, Aar) %>%
summarize(R_squared = summary(lm(Lengde ~ Radius))$r.squared,
Intercept = coef(lm(Lengde ~ Radius))[1])
print(data_check)
#decide on cut-off on 0.8
ok_lakes_years <- data_check[data_check$R_squared>0.8, ]
#Remove r_squared of 1, which seems wronge
ok_lakes_years <- ok_lakes_years[!ok_lakes_years$R_squared==1, ]
indData <- indData[indData$FK_InnsjoNr %in% ok_lakes_years$FK_InnsjoNr & indData$Aar %in% ok_lakes_years$Aar, ]
#setting up data for RFishBC (renaming variables)
indData <- indData %>%
rename(id = InnlandsfiskID,
agecap = AlderSkjell,
radcap = Radius,
rad1 = Radius1,
rad2 = Radius2,
rad3 = Radius3,
rad4 = Radius4,
rad5 = Radius5,
rad6 = Radius6,
rad7 = Radius7,
rad8 = Radius8,
rad9 = Radius9,
rad10 = Radius10,
rad11 = Radius11,
rad12 = Radius12,
rad13 = Radius13,
rad14 = Radius14,
rad15 = Radius15,
rad16 = Radius16,
rad17 = Radius17,
rad18 = Radius18,
rad19 = Radius19,
rad20 = Radius20)
##Back calculating data using fraser lee per lake
indData <- indData %>%
group_by(FK_InnsjoNr) %>%
do(backCalc(., Lengde, BCM = "FRALE",
inFormat = "wide", outFormat = "long", digits = 0)) %>%
ungroup()
# Print the resulting dataframe
print(indData)
###
#Rename variables
indData <- indData %>%
rename(LengdeValder = bclen,
alder_aar = ann)
#including year of length increment (specific year affecting specific growth)
indData$vekstaar <- indData$Aar-((indData$agecap - indData$alder_aar+1))
colnames(indData)
colnames(indData) <- c("fishID",
"InnsjoNr",
"date",
"year",
"month",
"day",
"runNr",
"speciesID",
"sex",
"ageAtYear",
"lengthAtYear",
"yearGrowthOccured")
# import data with catchment variables
catchmentVars <- read_csv("dataset/timeseries_clc_population.csv")%>%
dplyr::mutate(innsjo_nr = as.character(innsjo_nr))%>%
dplyr::select(-c("vassdragNr"))%>%
distinct(innsjo_nr, year, .keep_all = TRUE)
colnames(catchmentVars)[1] <- c("InnsjoNr") # ensure that the lakenr are the same for all datasets
# import lake IDs
lakeInfo <- read_excel("dataset/Oversikt-lokaliteter-lagt inn i basen.xls")%>%
dplyr::select("Loknr", "InnsjoNr", "Loknavn")
# Add lake Nr and name to the individual fish dataset
# Catchment dataset has been formatted to the regions and years we need.
indDataWithCatchments <- indData %>%
filter(sex <= 2)%>%
filter(InnsjoNr %in% catchmentVars$InnsjoNr)%>%
filter(year %in% catchmentVars$year)%>%
inner_join(catchmentVars, by = c("InnsjoNr", "year"), keep = FALSE)
indData %>%
filter(sex <= 2
)
indDataWithCatchments
indData
#load packages
library(nimble)
library(dplyr)
library(readr)
library(readxl)
library(reshape2)
library(tidyr)
# set working directory.
#change this for your particular application
setwd("C:/GitHub/fishyIPMs/NewDataset")
# Import Individual data
indData <- read.delim("dataset/innlandsfisk.txt",
sep = ";")
# select the species ID of interest from the data
focal_speciesid <- 5
indData <- indData[indData$FK_ArtID==focal_speciesid,]
#remove NAs for Length and Radius
indData <- indData[complete.cases(indData$Radius), ]
indData <- indData[complete.cases(indData$Lengde), ]
#Check fish data for different lakes
table(indData$FK_InnsjoNr)
# Some lakes have very few individuals across time(less than 10),
#remove these lakes as they dont seem representative for the species
# Remove rows with less than min_rows_per_category per category
indData <- indData %>%
group_by(FK_InnsjoNr) %>%
filter(n() >= 9) %>%
ungroup()
plot(indData$Lengde ~ indData$Radius)
#Seem to be two types of measurements, just remove the "outliers" for now
indData <- indData[indData$Radius<400,]
#Cheking for strange length Radius correlations among lakes and years
data_check <- indData %>%
group_by(FK_InnsjoNr, Aar) %>%
summarize(R_squared = summary(lm(Lengde ~ Radius))$r.squared,
Intercept = coef(lm(Lengde ~ Radius))[1])
print(data_check)
#decide on cut-off on 0.8
ok_lakes_years <- data_check[data_check$R_squared>0.8, ]
#Remove r_squared of 1, which seems wronge
ok_lakes_years <- ok_lakes_years[!ok_lakes_years$R_squared==1, ]
indData <- indData[indData$FK_InnsjoNr %in% ok_lakes_years$FK_InnsjoNr & indData$Aar %in% ok_lakes_years$Aar, ]
#setting up data for RFishBC (renaming variables)
indData <- indData %>%
rename(id = InnlandsfiskID,
agecap = AlderSkjell,
radcap = Radius,
rad1 = Radius1,
rad2 = Radius2,
rad3 = Radius3,
rad4 = Radius4,
rad5 = Radius5,
rad6 = Radius6,
rad7 = Radius7,
rad8 = Radius8,
rad9 = Radius9,
rad10 = Radius10,
rad11 = Radius11,
rad12 = Radius12,
rad13 = Radius13,
rad14 = Radius14,
rad15 = Radius15,
rad16 = Radius16,
rad17 = Radius17,
rad18 = Radius18,
rad19 = Radius19,
rad20 = Radius20)
##Back calculating data using fraser lee per lake
indData <- indData %>%
group_by(FK_InnsjoNr) %>%
do(backCalc(., Lengde, BCM = "FRALE",
inFormat = "wide", outFormat = "long", digits = 0)) %>%
ungroup()
# Print the resulting dataframe
print(indData)
###
#Rename variables
indData <- indData %>%
rename(LengdeValder = bclen,
alder_aar = ann)
#including year of length increment (specific year affecting specific growth)
indData$vekstaar <- indData$Aar-((indData$agecap - indData$alder_aar+1))
colnames(indData)
#select variables of interest and change column names
indData <- indData[, c(1, 4, 6:11, 21, 40:42)]
colnames(indData)
View(indData)
colnames(indData) <- c("fishID",
"InnsjoNr",
"date",
"year",
"month",
"day",
"runNr",
"speciesID",
"sex",
"ageAtYear",
"lengthAtYear",
"yearGrowthOccured")
# import data with catchment variables
catchmentVars <- read_csv("dataset/timeseries_clc_population.csv")%>%
dplyr::mutate(innsjo_nr = as.character(innsjo_nr))%>%
dplyr::select(-c("vassdragNr"))%>%
distinct(innsjo_nr, year, .keep_all = TRUE)
colnames(catchmentVars)[1] <- c("InnsjoNr") # ensure that the lakenr are the same for all datasets
# import lake IDs
lakeInfo <- read_excel("dataset/Oversikt-lokaliteter-lagt inn i basen.xls")%>%
dplyr::select("Loknr", "InnsjoNr", "Loknavn")
# Add lake Nr and name to the individual fish dataset
# Catchment dataset has been formatted to the regions and years we need.
indDataWithCatchments <- indData %>%
filter(sex <= 2)%>%
filter(InnsjoNr %in% catchmentVars$InnsjoNr)%>%
filter(year %in% catchmentVars$year)%>%
inner_join(catchmentVars, by = c("InnsjoNr", "year"), keep = FALSE)
View(indDataWithCatchments)
# data is collected in 2008
# create the age at harvest data
indDataWithCatchments$presence <- 1
ageAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dcast(.,
year + sex + InnsjoNr + speciesID ~ ageAtYear,
value.var = "presence",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr", "speciesID"),
keep = FALSE,
multiple = "first")
ageAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dcast(.,
year + sex + InnsjoNr  ~ ageAtYear,
value.var = "presence",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr", "speciesID"),
keep = FALSE,
multiple = "first")
# data is collected in 2008
# create the age at harvest data
indDataWithCatchments$presence <- 1
ageAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dcast(.,
year + sex + InnsjoNr  ~ ageAtYear,
value.var = "presence",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr"),
keep = FALSE,
multiple = "first")
ageAtHarvestData
View(ageAtHarvestData)
sprawningAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dplyr::mutate(maturation = ifelse(ageAtYear > 1, 0,1))%>% # I assume maturation occurs when age is grater than 1
dcast(.,
year + sex + InnsjoNr + speciesID ~ ageAtYear,
value.var = "maturation",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr", "speciesID"),
keep = FALSE,
multiple = "first")
sprawningAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dplyr::mutate(maturation = ifelse(ageAtYear > 1, 0,1))%>% # I assume maturation occurs when age is grater than 1
dcast(.,
year + sex + InnsjoNr ~ ageAtYear,
value.var = "maturation",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr", "speciesID"),
keep = FALSE,
multiple = "first")
sprawningAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dplyr::mutate(maturation = ifelse(ageAtYear > 1, 0,1))%>% # I assume maturation occurs when age is grater than 1
dcast(.,
year + sex + InnsjoNr ~ ageAtYear,
value.var = "maturation",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr"),
keep = FALSE,
multiple = "first")
View(sprawningAtHarvestData)
sprawningAtHarvestData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("ageAtYear", "sex", "InnsjoNr", "speciesID")]),]%>%
dplyr::mutate(maturation = ifelse(ageAtYear > 2, 0,1))%>% # I assume maturation occurs when age is grater than 1
dcast(.,
year + sex + InnsjoNr ~ ageAtYear,
value.var = "maturation",
fun.aggregate = sum)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr"),
keep = FALSE,
multiple = "first")
sprawningAtHarvestData
# Length at age dataset
lengthAtAgeData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("lengthAtYear", "sex", "InnsjoNr", "ageAtYear")]),]%>%
#dplyr::mutate(maturation = ifelse(sex == 1, 0, maturation))%>% # I assume 1 is males
dcast(.,
year + sex + InnsjoNr ~ ageAtYear,
value.var = "lengthAtYear",
fun.aggregate = mean)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr", "speciesID"),
keep = FALSE,
multiple = "first")
# Length at age dataset
lengthAtAgeData <- indDataWithCatchments[complete.cases(indDataWithCatchments[, c("lengthAtYear", "sex", "InnsjoNr", "ageAtYear")]),]%>%
#dplyr::mutate(maturation = ifelse(sex == 1, 0, maturation))%>% # I assume 1 is males
dcast(.,
year + sex + InnsjoNr ~ ageAtYear,
value.var = "lengthAtYear",
fun.aggregate = mean)%>%
left_join(., indDataWithCatchments,
by = c("year", "sex", "InnsjoNr"),
keep = FALSE,
multiple = "first")
#change the NANs into NAs
lengthAtAgeData[is.na(lengthAtAgeData)] <- NA
dataList <- list(ageAtHarvestData = ageAtHarvestData,
sprawningData = sprawningAtHarvestData,
indData = indDataWithCatchments,
#popnData = popnData,
lengthAtAgeData = lengthAtAgeData)
save(dataList,
file = "dataset/formattedDataList.RData")
# set working directory.
#change this for your particular application
setwd("C:/GitHub/fishyIPMs/NewDataset")
# Load formatted data
load("dataset/formattedDataList.RData")
nimbleOptions(MCMCusePredictiveDependenciesInCalculations = TRUE)
nimbleOptions(MCMCorderPosteriorPredictiveSamplersLast = FALSE)
# Load required packages
library(nimble)
library(dplyr)
library(readr)
library(reshape2)
# Write nimble Function to calculate eigen values and extract the maximum
lambdaEstimation <- function(x){
ret <- max(Re(eigen(x)$values))
return(ret)
}
nimbleLambdaEstimation <- nimble::nimbleRcall(
prototype = function(x = double(2)){},
returnType = double(0),
Rfun = 'lambdaEstimation'
)
nimbleLambdaEstimation(fishModelCompiled$Amat[,,1])
spawnsData <- apply(dataList$sprawningData[, 5:24], c(1,2), function(x) ifelse(x>0, 1, 0))
spawnsData
dataList$sprawningData
spawnsData <- apply(dataList$sprawningData[, 4:17], c(1,2), function(x) ifelse(x>0, 1, 0))
spawnsData
dataList$sprawningData$ageAtYear
